server {

    listen 80;
    server_name joomla.brasilia.io;
    server_name_in_redirect off;

    root /home/workspaces/php/joomla/joomla;
    index index.php index.html index.htm;
    

    # deny running scripts inside writable directories
    location ~* /(images|cache|media|logs|tmp)/.*\.(php|pl|py|jsp|asp|sh|cgi)$ {
            return 403;
            error_page 403 /403_error.html;
    }

    # Support Clean (aka Search Engine Friendly) URLs
    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
         root /home/workspaces/php/joomla/joomla;
    }
    
    
    # caching of files 
    location ~* \.(ico|pdf|flv)$ {
            expires 1y;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|swf|xml|txt|woff)$ {
            expires 14d;
    }



    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
    
    # Arquivo Uriel
    
    # Redireionar de www para sem-www> www.site.com para site.com
    
    if ($host = 'www.joomla.brasilia.io' ) {
    rewrite ^/(.*)$ http://joomla.brasilia.io/$1 permanent;
    
     }
     
    client_body_timeout 10;
    send_timeout 30;
    keepalive_timeout 40 20;

    # -- Socket settings, see http://wiki.nginx.org/HttpCoreModule
    connection_pool_size 8192;

    large_client_header_buffers 8 8k;
    request_pool_size 8k;

    # -- Performance, see http://wiki.nginx.org/HttpCoreModule
    sendfile on;
    sendfile_max_chunk 1m;
    postpone_output 0;
    tcp_nopush on;
    tcp_nodelay off;
    
    # -- Output buffering, see http://wiki.nginx.org/HttpCoreModule
    output_buffers 8 32k;

    # -- Character encoding, see http://wiki.nginx.org/HttpCharsetModule
    charset utf-8;
    source_charset utf-8;

    # -- Security options, see http://wiki.nginx.org/HttpCoreModule
    server_tokens off;
    ignore_invalid_headers on;
    # You may have to comment out the next line on multi-site installations
    disable_symlinks if_not_owner;
    
     # Don't cache if our headers (or cookie) are present
     proxy_no_cache $upstream_http_x_dont_cache_me $cookie_jnocache;
     proxy_cache_bypass $upstream_http_x_dont_cache_me $cookie_jnocache  $http_pragma $http_authorization $cookie_nocache $arg_nocache;
     # Ignore the standard no-cache headers - these will still be sent to the browser
     proxy_ignore_headers X-Accel-Expires Expires Cache-Control;
    
     # Don't send our custom header to the browser
     proxy_hide_header X-Dont-Cache-Me;
    
     # This next line is important if we're planning on caching for more than one site on the server
     proxy_cache_key "$scheme$host$request_uri";
     
     # Habilita o gzip
    gzip                    on;
    gzip_http_version       1.1;
    gzip_vary               on;
    gzip_comp_level 6;
    gzip_proxied    any;
    gzip_types      text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers  16      8k;
    fastcgi_buffers 8 16k;

    fastcgi_buffer_size 32k;
    fastcgi_read_timeout 300;
    fastcgi_send_timeout 300;
    
    # Desabilita o gzip para alguns navegadores
    gzip_disable    "MSIE [1-6].(?!.*SV1)";

    client_header_timeout 60;
    #client_header_buffer_size 1k;
    #send_timeout 20;

    location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
    }
    
    ## Block some common exploits
    
    set $common_exploit 0;
    if ($query_string ~ "proc/self/environ") {
            set $common_exploit 1;
    }
    if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") {
            set $common_exploit 1;
    }
    if ($query_string ~ "base64_(en|de)code\(.*\)") {
            set $common_exploit 1;
    }
    if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {
            set $common_exploit 1;
    }
    if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
            set $common_exploit 1;
    }
    if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
            set $common_exploit 1;
    }
    if ($common_exploit = 1) {
            return 403;
    }


    ## File injection protection
    set $file_injection 0;
    if ($query_string ~ "[a-zA-Z0-9_]=http://") {
            set $file_injection 1;
    }
    if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") {
            set $file_injection 1;
    }
    if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") {
            set $file_injection 1;
    }
    if ($file_injection = 1) {
            return 403;
    }


    # SQL injection first line of defence (NOT comprehensive!)

    set $sql_injection 0;
    if ($query_string ~ "concat.*\(") {
            set $sql_injection 1;
    }
    if ($query_string ~ "union.*select.*\(") {
            set $sql_injection 1;
    }
    if ($query_string ~ "union.*all.*select.*") {
            set $sql_injection 1;
    }
    if ($sql_injection = 1) {
            return 403;
    }

    # Basic anti-spam
    set $looks_like_spam 0;
    if ($query_string ~ "\b(ambien|blue\spill|cialis|cocaine|ejaculation|erectile)\b") {
            set $looks_like_spam 1;
    }
    if ($query_string ~ "\b(erections|hoodia|huronriveracres|impotence|levitra|libido)\b") {
            set $looks_like_spam 1;
    }
    if ($query_string ~ "\b(lipitor|phentermin|pro[sz]ac|sandyauer|tramadol|troyhamby)\b") {
            set $looks_like_spam 1;
    }
    if ($query_string ~ "\b(ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo)\b") {
            set $looks_like_spam 1;
    }
    if ($looks_like_spam = 1) {
            return 403;
    }

    ## Server protection
    ##
    ## Nothing on my site runs unless I say so!

    # Allow media files in select back-end directories
    location ~* ^/administrator/(components|modules|templates|images)/.*.(jp(e?g|2)?|png|gif|bmp|css|js|swf|html?|ico|mpe(eg?[34])|avi|wav|og[gv]|xlsx?|docx?|pptx?|zip|rar|pdf|xps|txt|7z|svg|od[tsp]|flv|mov)$ {
            break;
    }

   # Allow media files in select front-end directories
    location ~* ^/(components|modules|templates|images|plugins|media|includes/js)/.*.(jp(e?g|2)?|png|gif|bmp|css|js|swf|html?|ico|mpe(eg?[34])|avi|wav|og[gv]|xlsx?|docx?|pptx?|zip|rar|pdf|xps|txt|7z|svg|od[tsp]|flv|mov)$ {
            break;
    }


    ## User agent blocking
    ##
    ## Disables access to your site by user agent. Useful to block some
    ## bandwidth hoggers.

    set $bad_ua 0;
    
    # This also disables Akeeba Remote Control 2.5 and earlier
    if ($http_user_agent ~ "Indy Library") {
            set $bad_ua 1;
    }

    # Disabling Wget will also block the most common method to run CRON jobs        
    if ($http_user_agent ~ "Wget") {
            set $bad_ua 1;
    }
    
    # Common bandwidth hoggers and hacking tools. Each rule is three lines, beginning with "if"
    if ($http_user_agent ~ "libwww-perl") {
            set $bad_ua 1;
    }
    if ($http_user_agent ~ "Download Demon") {
            set $bad_ua 1;
    }
    if ($http_user_agent ~ "GetRight") {
            set $bad_ua 1;
    }
    if ($http_user_agent ~ "GetWeb!") {
            set $bad_ua 1;
    }
    if ($http_user_agent ~ "Go!Zilla") {
            set $bad_ua 1;
    }
    if ($http_user_agent ~ "Go-Ahead-Got-It") {
            set $bad_ua 1;
    }
    if ($http_user_agent ~ "GrabNet") {
            set $bad_ua 1;
    }
    if ($http_user_agent ~ "TurnitinBot") {
            set $bad_ua 1;
    }
    
    # If you enable any of the above don't remove this. It's what blocks
    # the bad user agents!
    if ($bad_ua = 1) {
            return 403;
    }
    

}
